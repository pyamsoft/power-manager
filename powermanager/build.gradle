/*
 * Copyright 2016 Peter Kenji Yamanaka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

tasks.whenTaskAdded { task ->
  if (task.name.startsWith("lint")) {
    task.enabled = false
  }
}

apply plugin: "com.android.application"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "com.getkeepsafe.dexcount"
apply plugin: "net.ltgt.errorprone"
apply plugin: "me.tatarka.retrolambda"

android {
  compileSdkVersion rootProject.ext.maxSdk
  buildToolsVersion "$buildTools"

  //noinspection GroovyMissingReturnStatement
  defaultConfig {
    applicationId "com.pyamsoft.powermanager"
    targetSdkVersion rootProject.ext.maxSdk
    versionCode 96
    versionName "6.6.7pre1"

    // For vector drawables
    vectorDrawables.useSupportLibrary = true
  }

  productFlavors {

    //noinspection GroovyMissingReturnStatement
    dev {
      // Enable pre-dexing to produce an APK that can be tested on
      // Android 5.0+ without the time-consuming DEX build processes.
      minSdkVersion rootProject.ext.devSdk
    }

    //noinspection GroovyMissingReturnStatement
    prod {
      // The actual minSdkVersion for the production version.
      minSdkVersion rootProject.ext.minSdk
    }
  }


  buildTypes {
    release {
      multiDexEnabled false
    }
    debug {
      multiDexEnabled true
      multiDexKeepFile new File('multidex-config.txt')
    }
  }

  dataBinding {
    enabled true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  //noinspection GroovyAssignabilityCheck
  signingConfigs {
    release {
      //noinspection GroovyAssignabilityCheck
      storeFile new File(RELEASE_STORE_FILE)
      //noinspection GroovyAssignabilityCheck
      keyAlias RELEASE_KEY_ALIAS
      //noinspection GroovyAssignabilityCheck
      keyPassword RELEASE_KEY_PASSWD
      //noinspection GroovyAssignabilityCheck
      storePassword RELEASE_STORE_PASSWD
    }
  }

  buildTypes {
    release {
      //noinspection GroovyAssignabilityCheck
      signingConfig signingConfigs.release
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
    }
  }

  dexOptions {
    javaMaxHeapSize "$heapSize"
  }
}

dependencies {
  compile fileTree(dir: "libs", include: ["*.jar"])

  retrolambdaConfig "net.orfjackal.retrolambda:retrolambda:${rootProject.ext.retrolambda}"

  // Dagger
  annotationProcessor "com.google.dagger:dagger-compiler:$dagger"

  // Firebase Crash
  compile "com.google.firebase:firebase-crash:$firebase"

  // Tap Target View
  compile "com.getkeepsafe.taptargetview:taptargetview:$tapTargetView"

  // Leak Canary
  debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanary"
  releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanary"
  testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanary"

  // PYDroid
  compile("com.github.pyamsoft.pydroid:pydroid-ui:$pydroid@aar") {
    transitive = true
  }
  compile("com.github.pyamsoft.pydroid:pydroid-design:$pydroid@aar") {
    transitive = true
  }

  compile project(":powermanager-airplane")
  compile project(":powermanager-bluetooth")
  compile project(":powermanager-data")
  compile project(":powermanager-doze")
  compile project(":powermanager-main")
  compile project(":powermanager-sync")
  compile project(":powermanager-trigger")
  compile project(":powermanager-overview")
  compile project(":powermanager-wear")
  compile project(":powermanager-wifi")
  compile project(":powermanager-service")
  compile project(":powermanager-settings")
}

// AdView
apply plugin: "com.google.gms.google-services"
